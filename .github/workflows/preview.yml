name: Deploy Preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker

      - name: Check if PR service exists
        id: check_service
        run: |
          SERVICE_NAME="ng-datasets-be-pr-${{ github.event.number }}"

          # Check if the service exists and get its EXACT URL from Cloud Run
          echo "Checking if service $SERVICE_NAME exists..."

          # Use gcloud run services list to get the exact URL
          SERVICE_INFO=$(gcloud run services list --platform managed --region us-central1 --filter="metadata.name:$SERVICE_NAME" --format="value(status.url)" 2>/dev/null || true)

          if [ -n "$SERVICE_INFO" ] && [ "$SERVICE_INFO" != "" ]; then
            echo "SERVICE_EXISTS=true" >> $GITHUB_OUTPUT

            # Get the correct URL format from the URLs annotation
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format="value(metadata.annotations['run.googleapis.com/urls'])" | jq -r '.[0]' 2>/dev/null || true)

            # Fallback to status.url if the annotation method fails
            if [ -z "$SERVICE_URL" ] || [ "$SERVICE_URL" = "null" ]; then
              SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format="value(status.url)" 2>/dev/null || true)
            fi

            # Extract hostname from URL
            SERVICE_HOST=$(echo $SERVICE_URL | sed 's|^https://||' | sed 's|^http://||' | sed 's|/$||')

            echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
            echo "SERVICE_HOST=$SERVICE_HOST" >> $GITHUB_OUTPUT

            echo "✅ PR service exists!"
            echo "   URL: $SERVICE_URL"
            echo "   Host: $SERVICE_HOST"
          else
            echo "SERVICE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "❌ PR service does not exist, will create new one"
          fi

      - name: Deploy Preview to Cloud Run
        env:
          DEBUG: ${{ vars.DEBUG }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          USE_POSTGRES: ${{ vars.USE_POSTGRES }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          CORS_ALLOWED_ORIGINS: ${{ vars.CORS_ALLOWED_ORIGINS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ vars.GOOGLE_REDIRECT_URI }}
          GOOGLE_AUTH_SCOPE: ${{ vars.GOOGLE_AUTH_SCOPE }}
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          GOOGLE_CLOUD_PROJECT: ${{ vars.GOOGLE_CLOUD_PROJECT }}
          VERTEX_AI_LOCATION: ${{ vars.VERTEX_AI_LOCATION }}
          VERTEX_AI_MODEL: ${{ vars.VERTEX_AI_MODEL }}
          SERVICE_EXISTS: ${{ steps.check_service.outputs.SERVICE_EXISTS }}
          EXISTING_HOST: ${{ steps.check_service.outputs.SERVICE_HOST }}
          EXISTING_URL: ${{ steps.check_service.outputs.SERVICE_URL }}
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
        run: |
          SERVICE_NAME="ng-datasets-be-pr-${{ github.event.number }}"

          echo "Deploying preview service for PR #${{ github.event.number }}: $SERVICE_NAME"

          # If PR service exists, use its EXACT hostname from the check step
          if [ "$SERVICE_EXISTS" = "true" ]; then
            ALLOWED_HOSTS_VALUE="$EXISTING_HOST"
            echo "📍 Using existing PR service URL: $EXISTING_URL"
            echo "🔒 Setting ALLOWED_HOSTS to: $ALLOWED_HOSTS_VALUE"
          else
            ALLOWED_HOSTS_VALUE="*"
            echo "🆕 Creating new PR service, will set ALLOWED_HOSTS after deployment"
          fi

          # Deploy the PR-specific service
          echo "Deploying..."
          gcloud run deploy $SERVICE_NAME \
            --source . \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 5 \
            --tag pr-${{ github.event.number }} \
            --set-env-vars "DEBUG=${DEBUG}" \
            --set-env-vars "SECRET_KEY=${SECRET_KEY}" \
            --set-env-vars "USE_POSTGRES=${USE_POSTGRES}" \
            --set-env-vars "DB_NAME=${DB_NAME}" \
            --set-env-vars "DB_USER=${DB_USER}" \
            --set-env-vars "DB_PASSWORD=${DB_PASSWORD}" \
            --set-env-vars "DB_HOST=${DB_HOST}" \
            --set-env-vars "DB_PORT=${DB_PORT}" \
            --set-env-vars "^@^CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}" \
            --set-env-vars "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" \
            --set-env-vars "^@^GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}" \
            --set-env-vars "^@^GOOGLE_AUTH_SCOPE=${GOOGLE_AUTH_SCOPE}" \
            --set-env-vars "^@^GCP_SERVICE_ACCOUNT_KEY=${GCP_SERVICE_ACCOUNT_KEY}" \
            --set-env-vars "BUCKET_NAME=${BUCKET_NAME}" \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}" \
            --set-env-vars "VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION}" \
            --set-env-vars "VERTEX_AI_MODEL=${VERTEX_AI_MODEL}" \
            --set-env-vars "ALLOWED_HOSTS=${ALLOWED_HOSTS_VALUE}"

          # If this was a NEW PR service, get its URL and update ALLOWED_HOSTS
          if [ "$SERVICE_EXISTS" = "false" ]; then
            echo ""
            echo "🔍 Getting URL for newly created PR service..."

            # Get the correct URL format from the URLs annotation
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format="value(metadata.annotations['run.googleapis.com/urls'])" | jq -r '.[0]' 2>/dev/null || true)

            # Fallback to status.url if the annotation method fails
            if [ -z "$SERVICE_URL" ] || [ "$SERVICE_URL" = "null" ]; then
              SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format="value(status.url)")
            fi

            SERVICE_HOST=$(echo $SERVICE_URL | sed 's|^https://||' | sed 's|^http://||' | sed 's|/$||')

            echo "📍 New PR service URL: $SERVICE_URL"
            echo "🔒 Updating ALLOWED_HOSTS to: $SERVICE_HOST"

            # Update ALLOWED_HOSTS with the actual hostname
            gcloud run services update $SERVICE_NAME \
              --region us-central1 \
              --update-env-vars "ALLOWED_HOSTS=$SERVICE_HOST"

            echo "✅ ALLOWED_HOSTS updated successfully"
            echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          else
            # PR service already existed, use the URL from check step
            echo "SERVICE_URL=$EXISTING_URL" >> $GITHUB_ENV
          fi

      - name: Verify deployment
        run: |
          SERVICE_NAME="ng-datasets-be-pr-${{ github.event.number }}"
          echo ""
          echo "🔍 Verifying deployment configuration..."

          # Get current ALLOWED_HOSTS value
          CURRENT_ALLOWED_HOSTS=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format="export" | grep "ALLOWED_HOSTS" | cut -d'"' -f4)

          echo "✅ Preview deployment successful!"
          echo "📍 Service URL: ${{ env.SERVICE_URL }}"
          echo "🔒 ALLOWED_HOSTS is set to: $CURRENT_ALLOWED_HOSTS"

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🚀 Preview deployment')
            );

            const serviceExists = '${{ steps.check_service.outputs.SERVICE_EXISTS }}' === 'true';
            const statusText = serviceExists ? 'updated' : 'created';

            const body = `🚀 **Preview deployment ${statusText}!**

            📍 **Preview URL:** ${{ env.SERVICE_URL }}
            🔧 **Service:** ng-datasets-be-pr-${{ github.event.number }}

            ℹ️ This URL is specific to PR #${{ github.event.number }} and will remain stable.
            ℹ️ The main branch has its own separate production URL.

            This preview will be automatically deleted when the PR is merged or closed.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
