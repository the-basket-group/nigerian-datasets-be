name: Deploy Preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker

      - name: Deploy Preview to Cloud Run
        run: |
          SERVICE_NAME="ng-datasets-be-pr-${{ github.event.number }}"
          gcloud run deploy $SERVICE_NAME \
            --source . \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars DEBUG=true \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --tag pr-${{ github.event.number }}

          # Get the service URL and extract hostname
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region us-central1 --format 'value(status.url)')
          SERVICE_HOST=$(echo $SERVICE_URL | sed 's|https://||' | sed 's|http://||')

          # Update the service with the correct ALLOWED_HOSTS
          gcloud run services update $SERVICE_NAME \
            --region us-central1 \
            --set-env-vars DEBUG=true,ALLOWED_HOSTS=$SERVICE_HOST

          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🚀 Preview deployment')
            );

            const body = `🚀 **Preview deployment ready!**

            📍 **Preview URL:** ${{ env.SERVICE_URL }}
            🔧 **Service:** ng-datasets-be-pr-${{ github.event.number }}

            This preview will be automatically deleted when the PR is merged or closed.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
