name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker

      - name: Check if service exists and get URL
        id: check_service
        run: |
          # Check if the service already exists
          if gcloud run services describe ng-datasets-be --region us-central1 --format='value(status.url)' 2>/dev/null; then
            echo "SERVICE_EXISTS=true" >> $GITHUB_OUTPUT
            # Get the existing service URL and hostname
            SERVICE_URL=$(gcloud run services describe ng-datasets-be --region us-central1 --format='value(status.url)')
            SERVICE_HOST=$(echo $SERVICE_URL | sed 's|https://||' | sed 's|http://||')
            echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
            echo "SERVICE_HOST=$SERVICE_HOST" >> $GITHUB_OUTPUT
            echo "Service already exists with URL: $SERVICE_URL"
          else
            echo "SERVICE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Service does not exist, will create new one"
          fi

      - name: Deploy to Cloud Run
        env:
          DEBUG: ${{ vars.DEBUG }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          USE_POSTGRES: ${{ vars.USE_POSTGRES }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          CORS_ALLOWED_ORIGINS: ${{ vars.CORS_ALLOWED_ORIGINS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ vars.GOOGLE_REDIRECT_URI }}
          GOOGLE_AUTH_SCOPE: ${{ vars.GOOGLE_AUTH_SCOPE }}
          BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          SERVICE_EXISTS: ${{ steps.check_service.outputs.SERVICE_EXISTS }}
          EXISTING_HOST: ${{ steps.check_service.outputs.SERVICE_HOST }}
        run: |
          # If service exists, get its hostname for ALLOWED_HOSTS
          if [ "$SERVICE_EXISTS" = "true" ]; then
            ALLOWED_HOSTS_VALUE="$EXISTING_HOST"
            echo "Using existing service hostname: $ALLOWED_HOSTS_VALUE"
          else
            # For new deployment, we'll update ALLOWED_HOSTS after deployment
            ALLOWED_HOSTS_VALUE="*"  # Temporary wildcard
            echo "Creating new service, will update ALLOWED_HOSTS after deployment"
          fi

          # Deploy the service
          gcloud run deploy ng-datasets-be \
            --source . \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars "DEBUG=${DEBUG}" \
            --set-env-vars "SECRET_KEY=${SECRET_KEY}" \
            --set-env-vars "USE_POSTGRES=${USE_POSTGRES}" \
            --set-env-vars "DB_NAME=${DB_NAME}" \
            --set-env-vars "DB_USER=${DB_USER}" \
            --set-env-vars "DB_PASSWORD=${DB_PASSWORD}" \
            --set-env-vars "DB_HOST=${DB_HOST}" \
            --set-env-vars "DB_PORT=${DB_PORT}" \
            --set-env-vars "^@^CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}" \
            --set-env-vars "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" \
            --set-env-vars "^@^GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}" \
            --set-env-vars "^@^GOOGLE_AUTH_SCOPE=${GOOGLE_AUTH_SCOPE}" \
            --set-env-vars "BUCKET_NAME=${BUCKET_NAME}" \
            --set-env-vars "ALLOWED_HOSTS=${ALLOWED_HOSTS_VALUE}"

          # If this was a new service, update ALLOWED_HOSTS with the actual hostname
          if [ "$SERVICE_EXISTS" = "false" ]; then
            echo "New service created, updating ALLOWED_HOSTS..."
            SERVICE_URL=$(gcloud run services describe ng-datasets-be --region us-central1 --format='value(status.url)')
            SERVICE_HOST=$(echo $SERVICE_URL | sed 's|https://||' | sed 's|http://||')

            # Update only the ALLOWED_HOSTS variable
            gcloud run services update ng-datasets-be \
              --region us-central1 \
              --update-env-vars "ALLOWED_HOSTS=$SERVICE_HOST"

            echo "Updated ALLOWED_HOSTS to: $SERVICE_HOST"
            echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          else
            echo "SERVICE_URL=${{ steps.check_service.outputs.SERVICE_URL }}" >> $GITHUB_ENV
          fi

      - name: Display service URL
        run: |
          echo "🚀 Service deployed successfully!"
          echo "📍 URL: ${{ env.SERVICE_URL }}"
          echo "This URL will remain stable across deployments."
